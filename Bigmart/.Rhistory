# Stop the clock
x <- proc.time() - ptm
print(x)
# for plots
library(ggplot2)
library(gridExtra)
library(devtools)
library(ggbiplot)
# for correlation plots
library(corrplot)
# for manipulation of data
library(plyr)
library(dplyr)
# to use dummy values for factors
library(caret)
# for computation of missing values
library(mice)
library(doParallel)
library(detect)
library(randomForest)
#working directory
path <- "D:/R Project/Bigmart"
#set working directory
setwd(path)
#Load Datasets
train <- read.csv("Train_UWu5bXk.csv")
test <- read.csv("Test_u94Q5KV.csv")
#check dimesions ( number of row & columns) in data sets
dim(train)
dim(test)
# check the variables and their types in train
str(train)
# brief summary of train
summary(train)
# check the variables and their types in test
str(test)
# to simplify our task we'll (temporarily) vertically combine the train and test dataframes
test$Item_Outlet_Sales <-  0
combi <- rbind(train, test)
combi
# Fat content combined
levels(combi$Item_Fat_Content)
# "LF", "low fat" and "Low Fat" are certainly the same as are "reg" and "regular"
combi$Item_Fat_Content <- revalue(combi$Item_Fat_Content, c("LF" = "Low Fat", "low fat" = "Low Fat", "reg" = "Regular"))
# count fat levels for each Item type
fat <- as.data.frame(setNames(aggregate(
combi$Item_Fat_Content,
by=list(Category=combi$Item_Type, Category=combi$Item_Fat_Content),FUN= length),
c("Item_Type", "Item_Fat_Content", "number")
))
fat
levels(combi$Item_Fat_Content) <- c(levels(combi$Item_Fat_Content), "None")
combi[ which(combi$Item_Type == "Health and Hygiene") ,]$Item_Fat_Content <- "None"
combi[ which(combi$Item_Type == "Household") ,]$Item_Fat_Content <- "None"
combi[ which(combi$Item_Type == "Others") ,]$Item_Fat_Content <- "None"
str(combi)
# count fat levels for each Item type
fat <- as.data.frame(setNames(aggregate(
combi$Item_Fat_Content,
by=list(Category=combi$Item_Type, Category=combi$Item_Fat_Content), FUN= length),
c("Item_Type", "Item_Fat_Content", "number")
))
fat
# Also, some entries for Outlet_Size are empty, let's temporarily call them "Other"
levels(combi$Outlet_Size)[1]<- "Other"
combi$Outlet_Size
#any missing values?
table(is.na(combi))
#where exactly are those values missing?
colSums(is.na(combi))
# boxplot of weights vs Item type
ggplot(combi, aes(Item_Type, Item_Weight)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "black")) +
xlab("Item Type") +
ylab("Item Weight") +
ggtitle("Item Weight vs Item Type")
# boxplot of weights vs. Outlet Identifier
ggplot(combi, aes(Outlet_Identifier, Item_Weight)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "black")) +
xlab("Outlet_Identifier") +
ylab("Item Weight") +
ggtitle("Item Weight vs Outlet identifier")
weightsByItem <- as.data.frame(ddply(na.omit(combi), ~Item_Identifier,
summarise, mean = mean(Item_Weight), sd = sd(Item_Weight)))
weightsByItem$sd
# use the above computed values to fill the missing weight values
combi$Item_Weight <- ifelse(is.na(combi$Item_Weight),
weightsByItem$mean[match(combi$Item_Identifier, weightsByItem$Item_Identifier)],
combi$Item_Weight)
combi
table(is.na(combi))
# replotting the previous graphs to confirm the observation
# boxplot of weights vs Item type
ggplot(combi, aes(Item_Type, Item_Weight)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "black")) +
xlab("Item Type") +
ylab("Item Weight") +
ggtitle("Item Weight vs Item Type")
# boxplot of weights vs. Outlet Identifier
ggplot(combi, aes(Outlet_Identifier, Item_Weight)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "black")) +
xlab("Outlet_Identifier") +
ylab("Item Weight") +
ggtitle("Item Weight vs Outlet identifier")
summary(combi$Item_Weight, combi$Outlet_Identifier)
# the dataset is made by collection of data in 2013, so we compute
# the number of years the Outlest has been in existence
combi$Year <- as.factor(2013 - combi$Outlet_Establishment_Year)
combi <- select(combi, -c(Outlet_Establishment_Year))
combi
# plotting Item MRP
ggplot(combi, aes(x=Item_MRP)) +
geom_density(color = "blue", adjust=1/20) +
ggtitle("Density of Item MRP") +
scale_x_continuous(breaks = seq(0,270,10))
# We find that density is zero for three Item MRP's.
ggplot(combi, aes(x=Item_MRP)) +
geom_density(color = "blue", adjust=1/20) +
geom_vline(xintercept = 69, color="red")+
geom_vline(xintercept = 136, color="red")+
geom_vline(xintercept = 203, color="red") +
ggtitle("Density of Item MRP")
# Therfire there are four different price ranges in which we can
# categorize the items
# Introducing levels for each range
combi$MRP_Level <- as.factor(
ifelse(combi$Item_MRP < 69, "Low",
ifelse(combi$Item_MRP < 136, "Medium",
ifelse(combi$Item_MRP < 203, "High", "Very_High"))))
# Reordering the dataset for convenience
# placing Item_Outlet_Sales at last
combi <- select( combi, c(Item_Identifier,
Item_Weight,
Item_Fat_Content,
Item_Visibility,
Item_Type,
Item_MRP,
Outlet_Identifier,
Outlet_Size,
Outlet_Location_Type,
Outlet_Type,
Year,
MRP_Level,
Item_Outlet_Sales))
# how often does each Outlet_Identifier appear in the data
aggregate(combi$Outlet_Identifier, by=list(Category=combi$Outlet_Identifier), FUN=length)
str(combi)
# it can be observed that the two grocery stores, OUT010 and OUT019 have reported far less data.
# counting the Item ID's as nothing can be judged from the above data
aggregate(combi$Item_Identifier, by=list(Category=combi$Outlet_Identifier), FUN= length)
# boxplot of Sales v/s Outlet Identifier
ggplot(combi[1:nrow(train),], aes(Outlet_Identifier, Item_Outlet_Sales)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "black")) +
xlab("Outlet identifier") +
ylab("Sales") +
ggtitle("Sales vs Outlet identifier")
# boxplot of  Sales vs. Outlet Type
ggplot(combi[1:nrow(train),], aes(x = Outlet_Type, y = Item_Outlet_Sales, fill = Year)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "black")) +
xlab("Outlet Type") +
ylab("Sales") +
ggtitle("Sales vs Outlet Type")
# Sales in the one type 2 supermarket appear a bit low, as one would expect them to be higher than in the type 1 supermarkets.
# Maybe it's because it's still fairly new, having been founded 4 years ago.
# boxplot of  Sales vs. Outlet Type
ggplot(combi[1:nrow(train),], aes(x = Outlet_Type, y = Item_Outlet_Sales, fill = Outlet_Size)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "black")) +
xlab("Outlet type") +
ylab("Sales") +
ggtitle("Sales vs Outlet type")
# count the number of 'Others' per Outlet_Identifier and Outlet_Type, which are only in
# grocery store and type 1
otherShops <- as.data.frame( setNames(
aggregate(
combi$Outlet_Size,
by=list(Category=combi$Outlet_Identifier,
Category=combi$Outlet_Type,
Category=combi$Outlet_Location_Type,
Category=combi$Outlet_Size), FUN= length),
c("Outlet_Identifier","Outlet_Type", "Outlet_Location_Type", "Outlet_Size", "number")))
otherShops
# "OUT010" is clearly small
combi[ which(combi$Outlet_Identifier == "OUT010") ,]$Outlet_Size <- "Small"
# "OUT017" and "OUT045" could be small or medium
combi[ which(combi$Outlet_Identifier == "OUT017") ,]$Outlet_Size <- "Small"
combi[ which(combi$Outlet_Identifier == "OUT045") ,]$Outlet_Size <- "Small"
# count the number of others per Outlet_Identifier and Outlet_Type
otherShops <- as.data.frame( setNames(
aggregate(
combi$Outlet_Size,
by=list(Category=combi$Outlet_Identifier,
Category=combi$Outlet_Type,
Category=combi$Outlet_Location_Type,
Category=combi$Outlet_Size), FUN= length),
c("Outlet_Identifier","Outlet_Type", "Outlet_Location_Type", "Outlet_Size", "number")))
otherShops
# apply factor to Outlet_Size in order to drop the now unused level "Other"
combi$Outlet_Size <- factor(combi$Outlet_Size)
str(combi)
# boxplot of  Sales vs. Outlet location
ggplot(combi[1:nrow(train),], aes(x = Outlet_Location_Type, y = Item_Outlet_Sales, fill = Outlet_Size)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "black")) +
xlab("Outlet location") +
ylab("Sales") +
ggtitle("Sales vs Outlet location")
# boxplot of  Sales vs. Outlet type
ggplot(combi[1:nrow(train),], aes(x = Outlet_Type, y = Item_Outlet_Sales, fill = Outlet_Size)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "black")) +
xlab("Outlet type") +
ylab("Sales") +
ggtitle("Sales vs Outlet type")
# boxplot of  Sales vs. Item type
ggplot(combi[1:nrow(train),], aes(x = Item_Type, y = Item_Outlet_Sales, fill = Outlet_Size)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "black")) +
xlab("Item type") +
ylab("Sales") +
ggtitle("Sales vs Item type")
# boxplot of  Sales vs. Item type
ggplot(combi[1:nrow(train),], aes(x = Item_Type, y = Item_Outlet_Sales, fill = Outlet_Type)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "black")) +
xlab("Item type") +
ylab("Sales") +
ggtitle("Sales vs Item type")
# boxplot of Visibility vs Item type
ggplot(combi, aes(Item_Type, Item_Visibility, fill = Outlet_Size)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "black")) +
xlab("Item Type") +
ylab("Item Visibility") +
ggtitle("Item visibility vs Item Type")
# boxplot of Visibility vs. Outlet Identifier
ggplot(combi, aes(Outlet_Identifier, Item_Visibility)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "black")) +
xlab("Outlet_Identifier") +
ylab("Item Visibility") +
ggtitle("Item visibility vs Outlet identifier")
# We use the MICE package to impute those missing values
# to compare the visibility distribution BEFORE AND AFTER computing the missing values
# create a copy of non-vanishing entries
combiNonZeroVis <- subset(combi, Item_Visibility > 0)
# replace 0 by NA so that mice can work its magic
outletIdentifiers <- levels(combi$Outlet_Identifier)
itemTypes <- levels(combi$Item_Type)
for (outName in outletIdentifiers) {
for (itemName in itemTypes) {
combi[ which(combi$Outlet_Identifier == outName &
combi$Item_Type == itemName),]$Item_Visibility <-
ifelse(combi[ which(combi$Outlet_Identifier == outName & combi$Item_Type == itemName), ]$Item_Visibility == 0 ,
NA, combi[ which(combi$Outlet_Identifier == outName & combi$Item_Type == itemName),]$Item_Visibility
)
}
}
# any missing values now?
table(is.na(combi))
colSums(is.na(combi))
Scatt
# pattern of missing values
md.pattern(combi)
# let mice impute the missing visibilities
newCombi <- mice(combi,m=1,maxit=1,meth='pmm',seed=0)
install.packages(c("cluster", "Matrix", "nlme", "survival"))
